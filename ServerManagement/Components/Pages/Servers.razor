@page "/servers"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Servers</h3>

<br />
<br />


<div class="container-fluid text-center">
    <div class="row w-100">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")" >
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(()=> {SelectCity(city);})">@city</button>
                    </div>
                </div>               
            </div>
        }
    </div>
</div>

<br />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Server" @bind-value="ServerFilter" @bind-value:event="oninput"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />

<ul>
    @* @foreach(var server in servers) *@
    @* { *@

        <Virtualize Items="this.servers" Context="server">
        <li @key="server.Id">
            @server.Name in @server.City is
            <span style="color:@((server.IsOnline ? "green" : "red"))">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.Id" class="btn btn-link">Edit</a>
            &nbsp
            <EditForm Model="server"
                      FormName="@($"form-server-{server.Id}")"
                      OnValidSubmit="@(()=> {DeleteServer(server.Id);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>

        </li>
        </Virtualize>

    @* } *@
</ul>

<p>
    <a href="/servers/add">Add Server</a>
</p>

@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private List<string> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string _serverFilter = "";
    private string ServerFilter 
    {
        get => _serverFilter;
        set
        {
            _serverFilter = value;
            // manipulate here
            this.servers = ServersRepository.SearchServers(_serverFilter);
        } 
    }

    private void DeleteServer(int id)
    {
        if(id > 0)
        {
            ServersRepository.DeleteServer(id);
            // NavigationManager.Refresh();
        }

        try
        {
            NavigationManager.NavigateTo("/servers");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        this.ServerFilter = args.Value?.ToString() ?? string.Empty;
    }
    private void HandleSearch(MouseEventArgs args)
    {
        this.servers = ServersRepository.SearchServers(ServerFilter);
        this.selectedCity = string.Empty;
    }
}
